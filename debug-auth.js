const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function debugAuth() {
  console.log('üîç Debugando autentica√ß√£o...');
  
  try {
    // 1. Verificar se o usu√°rio existe
    const user = await prisma.user.findUnique({
      where: { email: 'sugar_daddy1@example.com' }
    });

    if (!user) {
      console.log('‚ùå Usu√°rio n√£o encontrado');
      return;
    }

    console.log('‚úÖ Usu√°rio encontrado:', user.email);

    // 2. Verificar se a senha est√° correta
    const password = '123456';
    const isValid = await bcrypt.compare(password, user.password);
    
    console.log('üîê Senha v√°lida:', isValid);

    if (!isValid) {
      console.log('‚ùå Senha incorreta');
      return;
    }

    // 3. Verificar dados do usu√°rio
    console.log('üìä Dados do usu√°rio:');
    console.log('- ID:', user.id);
    console.log('- Email:', user.email);
    console.log('- Username:', user.username);
    console.log('- Nome:', user.name);
    console.log('- Tipo:', user.userType);
    console.log('- G√™nero:', user.gender);
    console.log('- Verificado:', user.verified);
    console.log('- Premium:', user.premium);
    console.log('- Status:', user.status);

    // 4. Verificar se h√° problemas com campos obrigat√≥rios
    const requiredFields = ['username', 'userType', 'gender', 'birthdate'];
    const missingFields = requiredFields.filter(field => !user[field]);
    
    if (missingFields.length > 0) {
      console.log('‚ö†Ô∏è Campos obrigat√≥rios faltando:', missingFields);
    } else {
      console.log('‚úÖ Todos os campos obrigat√≥rios est√£o preenchidos');
    }

    // 5. Simular o que o NextAuth faria
    console.log('\nüîß Simulando dados que o NextAuth retornaria:');
    const nextAuthUser = {
      id: user.id,
      email: user.email,
      name: user.name || user.username,
      image: user.photoURL || '',
      userType: user.userType,
      premium: user.premium,
      verified: user.verified,
      isAdmin: user.isAdmin
    };
    
    console.log('NextAuth User:', nextAuthUser);

  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugAuth(); 