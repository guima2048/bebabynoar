import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function GET(request: NextRequest) {
  const userId = request.headers.get('x-user-id');
  if (!userId) {
    return NextResponse.json({ error: 'Não autenticado' }, { status: 401 });
  }

  try {
    // Busca todas as conversas onde o usuário participa
    const conversations = await prisma.conversation.findMany({
      where: {
        participants: {
          some: { userId: userId }
        }
      },
      include: {
        participants: {
          include: {
            user: true
          }
        },
        messages: {
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      },
      orderBy: { updatedAt: 'desc' }
    });

    // Monta resposta no formato esperado pelo frontend
    const result = await Promise.all(conversations.map(async (conv) => {
      // O outro usuário (não o logado)
      const otherParticipant = conv.participants.find(p => p.user.id !== userId);
      const lastMessage = conv.messages[0];
      
      // Contar mensagens não lidas
      const unreadCount = await prisma.message.count({
        where: {
          conversationId: conv.id,
          receiverId: userId,
          read: false
        }
      });

      return {
        id: conv.id,
        lastMessage: lastMessage?.content || '',
        lastMessageTime: lastMessage?.createdAt || conv.updatedAt,
        unreadCount: unreadCount,
        user: {
          id: otherParticipant?.user.id,
          username: otherParticipant?.user.username,
          photoURL: otherParticipant?.user.photoURL,
          userType: otherParticipant?.user.userType,
          premium: otherParticipant?.user.premium,
          online: false // Para produção: implementar status online
        }
      }
    }));

    // Calcular estatísticas
    const totalUnread = result.reduce((sum, conv) => sum + conv.unreadCount, 0);
    const onlineUsers = result.filter(conv => conv.user.online).length;

    return NextResponse.json({
      conversations: result,
      unreadCount: totalUnread,
      onlineUsers: onlineUsers
    });
  } catch (e) {
    return NextResponse.json({ error: 'Erro ao buscar conversas.' }, { status: 500 });
  }
} 