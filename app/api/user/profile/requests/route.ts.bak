import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// PATCH /api/user/profile/requests
export async function PATCH(request: NextRequest) {
  try {
    const userId = request.headers.get('x-user-id')
    if (!userId) {
      return NextResponse.json({ message: 'Não autenticado.' }, { status: 401 })
    }
    const { requestId, action } = await request.json()
    if (!requestId || !['approve', 'reject'].includes(action)) {
      return NextResponse.json({ message: 'Dados inválidos.' }, { status: 400 })
    }
    // Busca a solicitação
    const profileRequest = await prisma.profileRequest.findUnique({
      where: { id: requestId },
      select: { id: true, targetId: true, status: true }
    })
    if (!profileRequest) {
      return NextResponse.json({ message: 'Solicitação não encontrada.' }, { status: 404 })
    }
    if (profileRequest.targetId !== userId) {
      return NextResponse.json({ message: 'Você não tem permissão para aprovar/rejeitar esta solicitação.' }, { status: 403 })
    }
    if (profileRequest.status !== 'PENDING') {
      return NextResponse.json({ message: 'Solicitação já foi processada.' }, { status: 400 })
    }
    const newStatus = action === 'approve' ? 'APPROVED' : 'REJECTED'
    await prisma.profileRequest.update({
      where: { id: requestId },
      data: { status: newStatus }
    })
    return NextResponse.json({
      message: action === 'approve' ? 'Solicitação aprovada com sucesso!' : 'Solicitação rejeitada com sucesso!'
    })
  } catch (error) {
    console.error('Erro ao aprovar/rejeitar solicitação:', error)
    return NextResponse.json({ message: 'Erro interno do servidor.' }, { status: 500 })
  }
}

// POST /api/user/profile/requests
export async function POST(request: NextRequest) {
  try {
    const userId = request.headers.get('x-user-id')
    if (!userId) {
      return NextResponse.json({ message: 'Não autenticado.' }, { status: 401 })
    }
    const { targetUserId, message } = await request.json()
    if (!targetUserId || targetUserId === userId) {
      return NextResponse.json({ message: 'Dados inválidos.' }, { status: 400 })
    }
    // Verifica se já existe uma solicitação pendente
    const existing = await prisma.profileRequest.findFirst({
      where: {
        requesterId: userId,
        targetId: targetUserId,
        status: 'PENDING'
      }
    })
    if (existing) {
      return NextResponse.json({ message: 'Já existe uma solicitação pendente para este perfil.' }, { status: 409 })
    }
    const profileRequest = await prisma.profileRequest.create({
      data: {
        requesterId: userId,
        targetId: targetUserId,
        message: message || null
      }
    })
    return NextResponse.json({ profileRequest, message: 'Solicitação enviada com sucesso!' })
  } catch (error) {
    console.error('Erro ao criar solicitação de perfil:', error)
    return NextResponse.json({ message: 'Erro interno do servidor.' }, { status: 500 })
  }
}

// GET para listar solicitações recebidas e enviadas
export async function GET(request: NextRequest) {
  try {
    const userId = request.headers.get('x-user-id')
    if (!userId) {
      return NextResponse.json({ message: 'Não autenticado.' }, { status: 401 })
    }
    // Recebidas
    const received = await prisma.profileRequest.findMany({
      where: { targetId: userId },
      orderBy: { createdAt: 'desc' },
      include: { requester: { select: { id: true, username: true, photoURL: true } } }
    })
    // Enviadas
    const sent = await prisma.profileRequest.findMany({
      where: { requesterId: userId },
      orderBy: { createdAt: 'desc' },
      include: { targetUser: { select: { id: true, username: true, photoURL: true } } }
    })
    return NextResponse.json({ received, sent })
  } catch (error) {
    console.error('Erro ao listar solicitações de perfil:', error)
    return NextResponse.json({ message: 'Erro interno do servidor.' }, { status: 500 })
  }
} 