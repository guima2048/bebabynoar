import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { prisma } from '@/lib/prisma';

export async function GET() {
  try {
    // Autenticação admin
    const cookieStore = await cookies();
    const adminSession = cookieStore.get('admin_session');
    
    if (!adminSession || adminSession.value !== 'authenticated') {
      return NextResponse.json({ error: 'Não autorizado' }, { status: 401 });
    }

    // Buscar todos os usuários do banco de dados
    const users = await prisma.user.findMany({
      select: {
        id: true,
        username: true,
        email: true,
        userType: true,
        birthdate: true,
        city: true,
        state: true,
        status: true,
        premium: true,
        premiumExpiry: true,
        createdAt: true,
        lookingFor: true,
        lastActive: true,
        isAdmin: true,
        emailVerified: true,
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    // Formatar dados para a interface
    const formattedUsers = users.map(user => ({
      id: user.id,
      username: user.username,
      email: user.email,
      userType: user.userType,
      birthdate: user.birthdate.toISOString(),
      city: user.city,
      state: user.state,
      ativo: user.status === 'ACTIVE',
      premium: user.premium,
      createdAt: user.createdAt.toISOString(),
      lookingFor: user.lookingFor,
      lastActive: user.lastActive.toISOString(),
      isAdmin: user.isAdmin,
      emailVerified: user.emailVerified,
      premiumExpiry: user.premiumExpiry?.toISOString(),
      mainPhoto: null // Removed photoCount, profileViewCount, viewedByCount
    }));

    return NextResponse.json({ users: formattedUsers });
  } catch (error) {
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 });
  }
} 