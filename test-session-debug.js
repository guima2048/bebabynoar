const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugSession() {
  console.log('üîç Debugando sess√£o e autentica√ß√£o...');
  
  try {
    // Verificar se o usu√°rio existe no banco
    const user = await prisma.user.findUnique({
      where: { email: 'sugar_daddy1@example.com' },
      select: {
        id: true,
        email: true,
        username: true,
        name: true,
        userType: true,
        gender: true,
        password: true,
        verified: true,
        premium: true,
        status: true
      }
    });

    if (user) {
      console.log('‚úÖ Usu√°rio encontrado no banco:');
      console.log('- ID:', user.id);
      console.log('- Email:', user.email);
      console.log('- Username:', user.username);
      console.log('- Nome:', user.name);
      console.log('- Tipo:', user.userType);
      console.log('- G√™nero:', user.gender);
      console.log('- Tem senha:', !!user.password);
      console.log('- Verificado:', user.verified);
      console.log('- Premium:', user.premium);
      console.log('- Status:', user.status);
    } else {
      console.log('‚ùå Usu√°rio N√ÉO encontrado no banco');
    }

    // Verificar configura√ß√£o do NextAuth
    console.log('\nüîß Configura√ß√£o do NextAuth:');
    console.log('- NEXTAUTH_SECRET:', !!process.env.NEXTAUTH_SECRET);
    console.log('- NEXTAUTH_URL:', process.env.NEXTAUTH_URL);
    console.log('- NODE_ENV:', process.env.NODE_ENV);
    console.log('- DATABASE_URL:', !!process.env.DATABASE_URL);

    // Verificar se h√° problemas com o banco
    console.log('\nüîç Testando conex√£o com banco...');
    const userCount = await prisma.user.count();
    console.log('- Total de usu√°rios no banco:', userCount);

  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugSession(); 