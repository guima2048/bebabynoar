generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  username                String                    @unique
  password                String?
  birthdate               DateTime
  gender                  Gender
  userType                UserType
  lookingFor              UserType?
  state                   String
  city                    String
  about                   String?
  photoURL                String?
  premium                 Boolean                   @default(false)
  isAdmin                 Boolean                   @default(false)
  emailVerified           Boolean                   @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  education               String?
  emailVerifiedAt         DateTime?
  lastActive              DateTime                  @default(now())
  premiumExpiry           DateTime?
  profession              String?
  status                  UserStatus                @default(ACTIVE)
  name                    String?
  verified                Boolean                   @default(false)
  acceptsTravel           Boolean                   @default(false)
  meetingFrequency        String?
  relationshipType        String?
  sponsorshipStyle        String?
  acceptsExclusivity      Boolean                   @default(false)
  availableTime           String?
  relationshipFormat      String?
  relationshipGoal        String?
  blockedBy               Block[]                   @relation("TargetUserBlocks")
  blocks                  Block[]                   @relation("UserBlocks")
  conversations           ConversationParticipant[]
  favoritedBy             Favorite[]                @relation("TargetUserFavorites")
  favorites               Favorite[]                @relation("UserFavorites")
  receivedInterests       Interest[]                @relation("ReceivedInterests")
  sentInterests           Interest[]                @relation("SentInterests")
  receivedMessages        Message[]                 @relation("ReceiverMessages")
  sentMessages            Message[]                 @relation("SenderMessages")
  notifications           Notification[]
  pendingTexts            PendingText[]
  photos                  Photo[]
  sentProfileRequests     ProfileRequest[]          @relation("SentProfileRequests")
  receivedProfileRequests ProfileRequest[]          @relation("ReceivedProfileRequests")
  profileViews            ProfileView[]             @relation("ViewedProfile")
  viewedProfiles          ProfileView[]             @relation("ViewerProfile")
  reportedBy              Report[]                  @relation("ReceivedReports")
  reports                 Report[]                  @relation("SentReports")
  conversations2          Conversation[]            @relation("ConversationUsers")

  @@map("users")
}

model Photo {
  id            String         @id @default(cuid())
  url           String
  userId        String
  isPrivate     Boolean        @default(false)
  uploadedAt    DateTime       @default(now())
  status        PhotoStatus    @default(PENDING)
  photoReleases PhotoRelease[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model Message {
  id               String        @id @default(cuid())
  content          String
  createdAt        DateTime      @default(now())
  senderId         String
  receiverId       String
  read             Boolean       @default(false)
  conversationId   String?
  replyToMessageId String?
  conversation     Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver         User          @relation("ReceiverMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  replyToMessage   Message?      @relation("MessageReplies", fields: [replyToMessageId], references: [id])
  replies          Message[]     @relation("MessageReplies")
  sender           User          @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Interest {
  id         String         @id @default(cuid())
  message    String?
  status     InterestStatus @default(PENDING)
  createdAt  DateTime       @default(now())
  senderId   String
  receiverId String
  receiver   User           @relation("ReceivedInterests", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User           @relation("SentInterests", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("interests")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ProfileView {
  id       String   @id @default(cuid())
  viewedAt DateTime @default(now())
  viewerId String
  viewedId String
  viewed   User     @relation("ViewedProfile", fields: [viewedId], references: [id], onDelete: Cascade)
  viewer   User     @relation("ViewerProfile", fields: [viewerId], references: [id], onDelete: Cascade)

  @@unique([viewerId, viewedId])
  @@map("profile_views")
}

model Block {
  id           String   @id @default(cuid())
  reason       String?
  createdAt    DateTime @default(now())
  userId       String
  targetUserId String
  targetUser   User     @relation("TargetUserBlocks", fields: [targetUserId], references: [id], onDelete: Cascade)
  user         User     @relation("UserBlocks", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetUserId])
  @@map("blocks")
}

model Favorite {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  userId       String
  targetUserId String
  targetUser   User     @relation("TargetUserFavorites", fields: [targetUserId], references: [id], onDelete: Cascade)
  user         User     @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetUserId])
  @@map("favorites")
}

model Report {
  id          String       @id @default(cuid())
  reason      String
  description String?
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  reporterId  String
  reportedId  String
  reported    User         @relation("ReceivedReports", fields: [reportedId], references: [id], onDelete: Cascade)
  reporter    User         @relation("SentReports", fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model PendingText {
  id        String     @id @default(cuid())
  userId    String
  field     String
  content   String
  status    TextStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pending_texts")
}

model PhotoRelease {
  id           String    @id @default(cuid())
  photoId      String
  targetUserId String
  granted      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  grantedAt    DateTime?
  photo        Photo     @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([photoId, targetUserId])
  @@map("photo_releases")
}

model ProfileRequest {
  id           String        @id @default(cuid())
  requesterId  String
  status       RequestStatus @default(PENDING)
  message      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  targetUserId String
  requester    User          @relation("SentProfileRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  targetUser   User          @relation("ReceivedProfileRequests", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@unique([requesterId, targetUserId])
  @@map("profile_requests")
}

model Conversation {
  id              String                    @id @default(cuid())
  lastMessage     String?
  lastMessageTime DateTime                  @default(now())
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  participants    ConversationParticipant[]
  messages        Message[]
  users           User[]                    @relation("ConversationUsers")

  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model BlogPost {
  id               String         @id @default(cuid())
  title            String
  slug             String         @unique
  content          String
  excerpt          String?
  featuredImage    String?
  featuredImageAlt String?
  status           BlogStatus     @default(DRAFT)
  authorId         String
  readTime         Int            @default(5)
  publishedAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  comments         BlogComment[]
  likes            BlogLike[]
  categories       BlogCategory[] @relation("BlogCategoryToBlogPost")

  @@map("blog_posts")
}

model BlogCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  posts       BlogPost[] @relation("BlogCategoryToBlogPost")

  @@map("blog_categories")
}

model BlogComment {
  id        String        @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String?
  createdAt DateTime      @default(now())
  parent    BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   BlogComment[] @relation("CommentReplies")
  post      BlogPost      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("blog_comments")
}

model BlogLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("blog_likes")
}

model BlogImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  postId    String?
  createdAt DateTime @default(now())

  @@map("blog_images")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserType {
  SUGAR_BABY
  SUGAR_DADDY
  SUGAR_MOMMY
  SUGAR_BABYBOY
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  PENDING
}

enum InterestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  MESSAGE
  INTEREST
  SYSTEM
  PROFILE_VIEW
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum PhotoStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TextStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
